#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial para o NASA Space Apps Bot
Configura banco de dados, verifica depend√™ncias e executa testes b√°sicos
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} detectado")
    return True

def check_env_file():
    """Verifica se o arquivo .env existe"""
    if not Path('.env').exists():
        if Path('.env.example').exists():
            print("‚ö†Ô∏è  Arquivo .env n√£o encontrado!")
            print("   Copie .env.example para .env e configure suas vari√°veis:")
            print("   cp .env.example .env")
            return False
        else:
            print("‚ùå Arquivos .env e .env.example n√£o encontrados!")
            return False
    print("‚úÖ Arquivo .env encontrado")
    return True

def install_dependencies():
    """Instala depend√™ncias do requirements.txt"""
    if not Path('requirements.txt').exists():
        print("‚ùå Arquivo requirements.txt n√£o encontrado!")
        return False
    
    print("üì¶ Instalando depend√™ncias...")
    try:
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], capture_output=True, text=True, check=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        print("   Sa√≠da do erro:", e.stderr)
        return False

def setup_database():
    """Configura o banco de dados"""
    print("\nüóÑÔ∏è Configurando banco de dados...")
    
    try:
        # Importar ap√≥s instalar depend√™ncias
        from database.setup import db_setup
        
        # Inicializar banco
        if db_setup.initialize_database():
            print("‚úÖ Banco de dados configurado com sucesso!")
            return True
        else:
            print("‚ùå Falha na configura√ß√£o do banco de dados")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos do banco: {e}")
        print("   Verifique se as depend√™ncias foram instaladas corretamente")
        return False
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o do banco: {e}")
        return False

def run_tests():
    """Executa testes b√°sicos do sistema"""
    print("\nüß™ Executando testes b√°sicos...")
    
    try:
        # Importar m√≥dulos principais
        import config
        from database.setup import db_setup
        from database.models import Participante, AplicacaoEquipe
        
        # Testar configura√ß√£o
        if not config.DISCORD_TOKEN:
            print("‚ö†Ô∏è  DISCORD_TOKEN n√£o configurado no .env")
            return False
            
        # Testar conex√£o com banco
        if not db_setup.test_connection():
            print("‚ùå Falha no teste de conex√£o com banco de dados")
            return False
            
        print("‚úÖ Todos os testes b√°sicos passaram!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos testes: {e}")
        return False

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    print("=" * 60)
    print("üöÄ CONFIGURA√á√ÉO INICIAL - NASA SPACE APPS BOT")
    print("=" * 60)
    
    # Verifica√ß√µes b√°sicas
    if not check_python_version():
        sys.exit(1)
    
    if not check_env_file():
        sys.exit(1)
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Falha na instala√ß√£o de depend√™ncias")
        sys.exit(1)
    
    # Configurar banco
    if not setup_database():
        print("\n‚ùå Falha na configura√ß√£o do banco de dados")
        print("\nVerifique se:")
        print("‚Ä¢ PostgreSQL est√° instalado e rodando")
        print("‚Ä¢ Credenciais no .env est√£o corretas")
        print("‚Ä¢ Banco de dados existe e usu√°rio tem permiss√µes")
        sys.exit(1)
    
    # Executar testes
    if not run_tests():
        print("\n‚ö†Ô∏è  Alguns testes falharam, mas o setup b√°sico foi conclu√≠do")
    
    print("\n" + "=" * 60)
    print("‚úÖ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("")
    print("üöÄ Para executar o bot:")
    print("   python bot.py")
    print("")
    print("üìö Comandos √∫teis:")
    print("   /setup     - Configura painel de inscri√ß√µes")
    print("   /equipes   - Sistema de busca de equipes")
    print("   /stats     - Estat√≠sticas de inscri√ß√µes")
    print("")
    print("üìñ Veja CLAUDE.md para mais informa√ß√µes")
    print("=" * 60)

if __name__ == "__main__":
    main()